{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marquis\\\\quiz-only\\\\project\\\\src\\\\components\\\\quiz\\\\play.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport M from 'materialize-css';\nimport questions from '../../questions.json';\nimport isEmpty from '../../utils/is-Empty';\nimport correctNotification from '../../assets/audio/correct-answer.mp3';\nimport wrongNotification from '../../assets/audio/wrong-answer.mp3';\nimport buttonSound from '../../assets/audio/button-sound.mp3';\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\n      let {\n        currentQuestionIndex\n      } = this.state;\n\n      if (!isEmpty(this.state.questions)) {\n        questions = this.state.questions;\n        currentQuestion = questions[currentQuestionIndex];\n        nextQuestion = questions[currentQuestionIndex + 1];\n        previousQuestion = questions[currentQuestionIndex - 1];\n        const answer = currentQuestion.answer;\n        this.setState({\n          currentQuestion,\n          nextQuestion,\n          previousQuestion,\n          numberOfQuestions: questions.length,\n          answer,\n          previousRandomNumbers: []\n        }, () => {\n          this.showOptions();\n          this.handleDisableButton();\n        });\n      }\n    };\n\n    this.handleOptionClick = e => {\n      if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n        setTimeout(() => {\n          document.getElementById('correct-sound').play();\n        }, 500);\n        this.correctAnswer();\n      } else {\n        setTimeout(() => {\n          document.getElementById('wrong-sound').play();\n        }, 500);\n        this.wrongAnswer();\n      }\n    };\n\n    this.handleNextButtonClick = () => {\n      this.playButtonSound();\n\n      if (this.state.nextQuestion !== undefined) {\n        this.setState(prevState => ({\n          currentQuestionIndex: prevState.currentQuestionIndex + 1\n        }), () => {\n          this.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        });\n      }\n    };\n\n    this.handlePreviousButtonClick = () => {\n      this.playButtonSound();\n\n      if (this.state.previousQuestion !== undefined) {\n        this.setState(prevState => ({\n          currentQuestionIndex: prevState.currentQuestionIndex - 1\n        }), () => {\n          this.displayQuestions(this.state.question, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        });\n      }\n    };\n\n    this.handleQuitButtonClick = () => {\n      this.playButtonSound();\n\n      if (window.confirm('Are you sure you want to quit?')) {\n        this.props.history.push('/');\n      }\n    };\n\n    this.handleButtonClick = event => {\n      switch (event.target.id) {\n        case 'next-button':\n          this.handleNextButtonClick();\n          break;\n\n        case 'previous-button':\n          this.handlePreviousButtonClick();\n          break;\n\n        case 'quit-button':\n          this.handleQuitButtonClick();\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.playButtonSound = () => {\n      document.getElementById('button-sound').play();\n    };\n\n    this.correctAnswer = () => {\n      M.toast({\n        html: \"Correct Answer\",\n        classes: \"tost-valid\",\n        displayLength: 1500\n      });\n      this.setState(prevState => ({\n        score: prevState.score + 1,\n        correctAnswers: prevState.correctAnswers + 1,\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n      }), () => {\n        this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n      });\n    };\n\n    this.wrongAnswer = () => {\n      navigator.vibrate(1000);\n      M.toast({\n        html: \"Wrong Answer!\",\n        classes: \"tost-invalid\",\n        displayLength: 1500\n      });\n      this.setState(prevState => ({\n        wrongAnswers: prevState.wrongAnswers + 1,\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n      }), () => {\n        this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n      });\n    };\n\n    this.showOptions = () => {\n      const options = Array.from(document.querySelectorAll('.option'));\n      options.forEach(option => {\n        option.style.visibility = \"visible\";\n      });\n      this.setState({\n        usedFiftyFifty: false\n      });\n    };\n\n    this.handleHints = () => {\n      if (this.state.hints > 0) {\n        const options = Array.from(document.querySelectorAll('.option'));\n        let indexOfAnswer;\n        options.forEach((option, index) => {\n          if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n            indexOfAnswer = index;\n          }\n        });\n\n        while (true) {\n          const randomNumber = Math.round(Math.random() * 3);\n\n          if (randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\n            options.forEach((option, index) => {\n              if (index === randomNumber) {\n                option.style.visibility = \"hidden\";\n                this.setState(prevState => ({\n                  hints: prevState.hints - 1,\n                  previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\n                }));\n              }\n            });\n            break;\n          }\n\n          if (this.state.previousRandomNumbers.length >= 3) break;\n        }\n      }\n    };\n\n    this.handleFiftyFifty = () => {\n      if (this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\n        const options = document.querySelectorAll('.option');\n        const randomNumbers = [];\n        let indexOfAnswer;\n        options.forEach((option, index) => {\n          if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n            indexOfAnswer = index;\n          }\n        });\n        let count = 0;\n\n        do {\n          const randomNumber = Math.round(Math.random() * 3);\n\n          if (randomNumber !== indexOfAnswer) {\n            if (randomNumbers.length < 2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\n              randomNumbers.push(randomNumber);\n              count++;\n            } else {\n              while (true) {\n                const newRandomNumber = Math.round(Math.random() * 3);\n\n                if (!randomNumbers.includes(newRandomNumber) && !randomNumbers.includes(indexOfAnswer)) {\n                  randomNumbers.push(newRandomNumber);\n                  count++;\n                  break;\n                }\n              }\n            }\n          }\n        } while (count < 2);\n\n        options.forEach((option, index) => {\n          if (randomNumbers.includes(index)) {\n            option.style.visibility = \"hidden\";\n          }\n        });\n        this.setState(prevState => ({\n          fiftyFifty: prevState.fiftyFifty - 1,\n          usedFiftyFifty: true\n        }));\n      }\n    };\n\n    this.startTimer = () => {\n      const countDownTime = Date.now() + 600000;\n      this.interval = setInterval(() => {\n        const now = new Date();\n        const distance = countDownTime - now;\n        const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        const seconds = Math.floor(distance % (1000 * 60) / 1000);\n\n        if (distance < 0) {\n          clearInterval(this.interval);\n          this.setState({\n            time: {\n              minutes: 0,\n              seconds: 0\n            }\n          }, () => {\n            alert('Quiz has ended');\n            this.props.history.push('/');\n          });\n        } else {\n          this.setState({\n            time: {\n              minutes,\n              seconds\n            }\n          });\n        }\n      }, 1000);\n    };\n\n    this.handleDisableButton = () => {\n      if (this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\n        this.setState({\n          previousButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          previousButtonDisabled: false\n        });\n      }\n\n      if (this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\n        this.setState({\n          nextButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          nextButtonDisabled: false\n        });\n      }\n    };\n\n    this.state = {\n      questions,\n      currentQuestion: {},\n      nextQuestion: {},\n      previousQuestion: {},\n      answer: '',\n      numberOfQuestions: 0,\n      numberOfAnsweredQuestions: 0,\n      currentQuestionIndex: 0,\n      correctAnswers: 0,\n      wrongAnswers: 0,\n      score: 0,\n      hints: 5,\n      fiftyFifty: 2,\n      usedFiftyFifty: false,\n      previousRandomNumbers: [],\n      nextButtonDisabled: false,\n      previousButtonDisabled: true,\n      time: {}\n    };\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    const {\n      questions,\n      currentQuestion,\n      nextQuestion,\n      previousQuestion\n    } = this.state;\n    this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\n    this.startTimer();\n  }\n\n  render() {\n    const {\n      currentQuestion,\n      currentQuestionIndex,\n      numberOfQuestions,\n      hints,\n      fiftyFifty,\n      time\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 25\n      }\n    }, \"Nimelssa quiz page\")), /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"audio\", {\n      id: \"correct-sound\",\n      src: correctNotification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"audio\", {\n      id: \"wrong-sound\",\n      src: wrongNotification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"audio\", {\n      id: \"button-sound\",\n      src: buttonSound,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }\n    }, \"Quiz Mode\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lifeline-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: this.handleFiftyFifty,\n      className: \"mdi mdi-set-center mdi-24px lifeline-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lifeline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 33\n      }\n    }, fiftyFifty))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: this.handleHints,\n      className: \"mdi mdi-lightbulb-on-outline mdi-24px lifeline-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lifeline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 31\n      }\n    }, hints)))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }, currentQuestionIndex + 1, \" of \", numberOfQuestions), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }\n    }, time.minutes, \" : \", time.seconds, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"mdi mdi-clock-outline mdi-24px lifeline-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 76\n      }\n    })))), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }\n    }, currentQuestion.question), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"options-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      onClick: this.handleOptionClick,\n      className: \"option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 21\n      }\n    }, currentQuestion.optionA), /*#__PURE__*/React.createElement(\"p\", {\n      onClick: this.handleOptionClick,\n      className: \"option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 21\n      }\n    }, currentQuestion.optionB)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"options-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      onClick: this.handleOptionClick,\n      className: \"option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }\n    }, currentQuestion.optionC), /*#__PURE__*/React.createElement(\"p\", {\n      onClick: this.handleOptionClick,\n      className: \"option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }\n    }, currentQuestion.optionD)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: classnames('', {\n        'disable': this.state.previo\n      }),\n      id: \"previous-button\",\n      onClick: this.handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }\n    }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"next-button\",\n      onClick: this.handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 22\n      }\n    }, \"Next\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"quit-button\",\n      onClick: this.handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 22\n      }\n    }, \"Quit\"))));\n  }\n\n}\n\nexport default Play;","map":{"version":3,"sources":["C:/Users/Marquis/quiz-only/project/src/components/quiz/play.js"],"names":["React","Component","Fragment","Helmet","M","questions","isEmpty","correctNotification","wrongNotification","buttonSound","Play","constructor","props","displayQuestions","state","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","answer","setState","numberOfQuestions","length","previousRandomNumbers","showOptions","handleDisableButton","handleOptionClick","e","target","innerHTML","toLowerCase","setTimeout","document","getElementById","play","correctAnswer","wrongAnswer","handleNextButtonClick","playButtonSound","undefined","prevState","handlePreviousButtonClick","question","handleQuitButtonClick","window","confirm","history","push","handleButtonClick","event","id","toast","html","classes","displayLength","score","correctAnswers","numberOfAnsweredQuestions","navigator","vibrate","wrongAnswers","options","Array","from","querySelectorAll","forEach","option","style","visibility","usedFiftyFifty","handleHints","hints","indexOfAnswer","index","randomNumber","Math","round","random","includes","concat","handleFiftyFifty","fiftyFifty","randomNumbers","count","newRandomNumber","startTimer","countDownTime","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","alert","previousButtonDisabled","nextButtonDisabled","componentDidMount","render","optionA","optionB","optionC","optionD","classnames","previo"],"mappings":"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","sourcesContent":[" import React, { Component, Fragment } from 'react';\r\n import { Helmet } from 'react-helmet';\r\n import M from 'materialize-css';\r\n import questions from '../../questions.json';\r\n import isEmpty from '../../utils/is-Empty';\r\n import correctNotification from '../../assets/audio/correct-answer.mp3';\r\n import wrongNotification from '../../assets/audio/wrong-answer.mp3';\r\n import buttonSound from '../../assets/audio/button-sound.mp3';\r\n\r\n class Play extends Component {\r\n     constructor(props){\r\n         super(props);\r\nthis.state = {\r\n    questions,\r\n    currentQuestion:{},\r\n    nextQuestion:{},\r\n    previousQuestion:{},\r\n    answer:'',\r\n    numberOfQuestions:0,\r\n    numberOfAnsweredQuestions:0,\r\n    currentQuestionIndex:0,\r\n    correctAnswers:0,\r\n    wrongAnswers:0,\r\n    score:0,\r\n    hints:5,\r\n    fiftyFifty:2,\r\n    usedFiftyFifty:false,\r\n    previousRandomNumbers:[],\r\n    nextButtonDisabled:false,\r\n    previousButtonDisabled: true,\r\n    time:{}\r\n}\r\nthis.interval = null;\r\n   }\r\n  \r\n   componentDidMount (){\r\n    const { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\r\n    this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion ); \r\n    this.startTimer()\r\n}\r\n\r\n displayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\r\nlet { currentQuestionIndex } = this.state;\r\nif(!isEmpty(this.state.questions)){\r\n    questions = this.state.questions;\r\n    currentQuestion = questions[currentQuestionIndex];\r\n    nextQuestion = questions[currentQuestionIndex + 1];\r\n    previousQuestion = questions[currentQuestionIndex - 1];\r\n    const answer = currentQuestion.answer;\r\n    this.setState({\r\n        currentQuestion,\r\n        nextQuestion,\r\n        previousQuestion,\r\n        numberOfQuestions: questions.length,\r\n        answer,\r\n        previousRandomNumbers: []\r\n},() => { \r\nthis.showOptions();\r\nthis.handleDisableButton();\r\n});\r\n  }\r\n    }  \r\n   \r\nhandleOptionClick = (e) =>{\r\n   if(e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()){\r\n       setTimeout(() => {\r\n        document.getElementById('correct-sound').play();\r\n       }, 500)\r\n       this.correctAnswer();\r\n   }else{\r\n       setTimeout(() => {\r\n        document.getElementById('wrong-sound').play();\r\n       }, 500)\r\n       this.wrongAnswer();\r\n   }\r\n}    \r\n\r\nhandleNextButtonClick = () =>{\r\n    this.playButtonSound();\r\nif(this.state.nextQuestion !== undefined){\r\n    this.setState(prevState => ({\r\n        currentQuestionIndex: prevState.currentQuestionIndex + 1\r\n    }), () => {\r\n        this.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion)\r\n    })\r\n}\r\n}\r\n\r\nhandlePreviousButtonClick = () =>{\r\n    this.playButtonSound();\r\nif(this.state.previousQuestion !== undefined){\r\n    this.setState(prevState => ({\r\n        currentQuestionIndex: prevState.currentQuestionIndex - 1\r\n    }), () => {\r\n        this.displayQuestions(this.state.question, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion)\r\n    })\r\n}\r\n}\r\n\r\nhandleQuitButtonClick = () => {\r\n    this.playButtonSound();\r\n if(window.confirm('Are you sure you want to quit?')){\r\n     this.props.history.push('/');\r\n   }\r\n}\r\nhandleButtonClick = (event) => {\r\n    switch (event.target.id) {\r\n        case 'next-button':\r\n            this.handleNextButtonClick();\r\n            break;\r\n\r\n        case 'previous-button':\r\n            this.handlePreviousButtonClick();\r\n            break;\r\n\r\n        case 'quit-button':\r\n            this.handleQuitButtonClick();\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nplayButtonSound = () => {\r\n    document.getElementById('button-sound').play();\r\n}\r\n\r\ncorrectAnswer = () => {\r\n    M.toast({\r\n        html:\"Correct Answer\",\r\n        classes: \"tost-valid\",\r\n        displayLength:1500\r\n    });\r\n    this.setState((prevState) => ({\r\n        score:prevState.score + 1,\r\n        correctAnswers:prevState.correctAnswers + 1,\r\n        currentQuestionIndex:prevState.currentQuestionIndex + 1,\r\n        numberOfAnsweredQuestions:prevState.numberOfAnsweredQuestions + 1\r\n    }), () => {\r\n        this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion)\r\n    })\r\n}\r\n\r\nwrongAnswer = () =>{\r\n    navigator.vibrate(1000);\r\n    M.toast({\r\n        html:\"Wrong Answer!\",\r\n        classes: \"tost-invalid\",\r\n        displayLength:1500\r\n    })\r\n    this.setState((prevState) => ({\r\n        wrongAnswers:prevState.wrongAnswers + 1,\r\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\r\n    }), () => {\r\n        this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion)\r\n    })\r\n}\r\n\r\n showOptions = () => {\r\n    const options = Array.from(document.querySelectorAll('.option'));\r\n\r\n     options.forEach((option) => {\r\n     option.style.visibility = \"visible\";\r\n     });\r\n\r\n    this.setState({\r\n        usedFiftyFifty: false\r\n    })\r\n }\r\n\r\n handleHints = () => {\r\n     if(this.state.hints > 0){\r\n        const options = Array.from(document.querySelectorAll('.option'));\r\n        let indexOfAnswer;\r\n    \r\n        options.forEach((option, index) => {\r\n            if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()){\r\n            indexOfAnswer = index;\r\n              }\r\n            });\r\n            \r\n            while (true) {\r\n              const randomNumber = Math.round(Math.random() * 3);\r\n                if(randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)){\r\n                   options.forEach((option, index) => {\r\n                     if(index === randomNumber){\r\n                        option.style.visibility = \"hidden\";\r\n                        this.setState((prevState) => ({\r\n                            hints: prevState.hints - 1,\r\n                            previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\r\n                        }));\r\n                    }\r\n                      });\r\n                        break;\r\n                 }\r\n                if(this.state.previousRandomNumbers.length >= 3) break;\r\n            }\r\n     }\r\n}\r\n \r\nhandleFiftyFifty = () => {\r\n     if (this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false){\r\n        const options = document.querySelectorAll('.option');\r\n        const randomNumbers = [];   \r\n        let indexOfAnswer;\r\n\r\n        options.forEach((option, index) => {\r\n            if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()){\r\n            indexOfAnswer = index;\r\n          }\r\n        });\r\n    \r\n        let count = 0;\r\n        do {\r\n            const randomNumber = Math.round(Math.random() * 3);\r\n            if(randomNumber !== indexOfAnswer){\r\n            if(randomNumbers.length < 2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)){\r\n                randomNumbers.push(randomNumber);  \r\n                count ++;\r\n              }else{\r\n                  while(true){\r\n                    const newRandomNumber = Math.round(Math.random() * 3);\r\n                    if(!randomNumbers.includes(newRandomNumber) && !randomNumbers.includes(indexOfAnswer)){\r\n                        randomNumbers.push(newRandomNumber);\r\n                        count ++;\r\n                        break;\r\n                    }\r\n                  }\r\n              }\r\n            }\r\n        } \r\n        while (count < 2);\r\n        options.forEach((option, index) => {\r\n            if(randomNumbers.includes(index)){\r\n                option.style.visibility = \"hidden\"; \r\n            }\r\n        });\r\n        this.setState( prevState => ({\r\n            fiftyFifty: prevState.fiftyFifty - 1,\r\n            usedFiftyFifty: true\r\n        }))\r\n    }     \r\n}    \r\n\r\nstartTimer = () => {\r\n    const countDownTime = Date.now() + 600000;\r\n    this.interval = setInterval(() => {\r\nconst now = new Date();\r\nconst distance = countDownTime - now;\r\n\r\nconst minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\nconst seconds = Math.floor((distance % (1000 * 60)) / (1000));\r\n\r\nif(distance < 0){\r\n    clearInterval(this.interval);\r\n    this.setState({\r\n        time: {\r\n            minutes: 0,\r\n            seconds: 0\r\n        }\r\n    }, () => {\r\n        alert('Quiz has ended')\r\n        this.props.history.push('/');\r\n    })\r\n}else{\r\n    this.setState({\r\n       time: {\r\n        minutes,\r\n        seconds\r\n       }});\r\n    }\r\n}, 1000);\r\n};\r\n\r\nhandleDisableButton = () => {\r\n    if(this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0){\r\n        this.setState({\r\n            previousButtonDisabled: true\r\n        })\r\n    }else{\r\n        this.setState({\r\n            previousButtonDisabled: false\r\n        })\r\n    }\r\n\r\n    if(this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions){\r\n        this.setState({\r\n            nextButtonDisabled: true\r\n        })\r\n    }else{\r\n        this.setState({\r\n            nextButtonDisabled: false\r\n        })\r\n    }\r\n}\r\n    render(){\r\n         const { \r\n            currentQuestion,\r\n            currentQuestionIndex,\r\n            numberOfQuestions, \r\n            hints,\r\n            fiftyFifty ,\r\n            time } = this.state;\r\n\r\n         return(\r\n             <Fragment>\r\n                <Helmet><title>Nimelssa quiz page</title></Helmet>\r\n                <Fragment>\r\n                    <audio id=\"correct-sound\" src={correctNotification}></audio>\r\n                    <audio id=\"wrong-sound\" src={wrongNotification}></audio>\r\n                    <audio id=\"button-sound\" src={buttonSound}></audio>\r\n                </Fragment>\r\n                <div className=\"questions\">\r\n                    <h2>Quiz Mode</h2>\r\n                <div className=\"lifeline-container\">\r\n                    <p>\r\n                        <span onClick={this.handleFiftyFifty} className='mdi mdi-set-center mdi-24px lifeline-icon'>\r\n                                <span className=\"lifeline\">{fiftyFifty}</span>\r\n                        </span>\r\n                    </p>\r\n                    <p>\r\n                        <span onClick={this.handleHints} className=\"mdi mdi-lightbulb-on-outline mdi-24px lifeline-icon\">\r\n                              <span className=\"lifeline\">{hints}</span>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <p>\r\n                    <span className=\"left\">{currentQuestionIndex + 1} of {numberOfQuestions}</span>\r\n                    <span className=\"right\">{time.minutes} : {time.seconds}<span className=\"mdi mdi-clock-outline mdi-24px lifeline-icon\"></span></span>\r\n                    </p>\r\n                </div>\r\n                <h5>{currentQuestion.question}</h5>\r\n                 <div className=\"options-container\">\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                 </div>\r\n                 <div className=\"options-container\">\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\r\n                 </div>\r\n                 <div className=\"button-container\">\r\n                    <button\r\n                            className={classnames('', {'disable': this.state.previo})}\r\n                            id=\"previous-button\"\r\n                            onClick={this.handleButtonClick}>\r\n                            Previous\r\n                    </button>\r\n                     <button id=\"next-button\"  onClick={this.handleButtonClick}>Next</button>\r\n                     <button id=\"quit-button\"  onClick={this.handleButtonClick}>Quit</button>\r\n                 </div>\r\n             </div>\r\n             </Fragment>\r\n         )\r\n         \r\n     }\r\n }\r\n\r\n export default Play;"]},"metadata":{},"sourceType":"module"}