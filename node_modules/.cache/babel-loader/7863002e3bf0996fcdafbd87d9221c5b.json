{"ast":null,"code":"var _jsxFileName = \"E:\\\\quiz-only\\\\client\\\\src\\\\components\\\\Login.js\";\nimport { Helmet } from 'react-helmet';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n/* import React, {Component, Fragment} from 'react'; */\n\nimport React, { useState, Fragment } from 'react';\n\nconst Login = () => {\n  const [userCredentialsInitialState, setUserCredentialsInitialState] = useState({\n    matric: '',\n    password: ''\n  });\n  const [errorMessageInitialState, setErrorMessageInitialState] = useState({\n    matricError: '',\n    passwordError: ''\n  });\n  const [initialstateSummation, setInitialStateSummation] = useState({\n    matric: '',\n    password: '',\n    matricError: '',\n    passwordError: ''\n  }),\n        state = initialState; // To figure ou\n\n  /* \r\n   const handleChange = event => {\r\n      this.setState({\r\n        [event.target.name] : event.target.value\r\n      });\r\n    }; */\n\n  const handleChange = event => {\n    setUserCredentialsInitialState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const validate = () => {\n    let matricError = \"\";\n    let passwordError = \"\";\n\n    if (!matric) {\n      matricError = \"Matric cannot be blank\";\n    }\n\n    if (!password) {\n      passwordError = \"Password cannot be blank\";\n    }\n    /*  if(matricError || passwordError){\r\n       this.setState({matricError, passwordError});\r\n       return false; \r\n     } */\n\n\n    if (matricError || passwordError) {\n      setErrorMessageInitialState({\n        matricError,\n        passwordError\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const isValid = this.validate();\n\n    if (isValid) {\n      const getOptions = {\n        method: \"GET\",\n        url: '/user/play/authenticated',\n        responseType: \"stream\"\n      };\n\n      const renderQuizPage = () => {\n        axios(getOptions).then(() => {\n          console.log('Quiz Page Is sucessfully rendered');\n          return this.props.history.push('/user/play/quiz');\n        }).catch(() => {\n          console.log('Unable render Quiz Page');\n        });\n      };\n\n      const payload = {\n        matric: matric,\n        password: password\n      };\n      axios({\n        url: \"/user/play/login\",\n        method: \"POST\",\n        data: payload,\n        withCredentials: true,\n        xsrfHeaderName: 'X-XSRF-TOKEN',\n        xsrfCookieName: 'XSRF-TOKEN'\n      }).then(() => {\n        return renderQuizPage();\n      }).catch(error => {\n        return this.props.history.push('/user/play/login');\n      });\n    }\n\n    ;\n    /* this.setState(initialState); */\n\n    setInitialStateSummation(initialstateSummation);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 20\n    }\n  }, \"Nimelssa Quiz - Login page\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col s12 m4 offset-m4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card z-depth-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content black white-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, \"Login\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"material-icons prefix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 23\n    }\n  }, \"account_circle\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"validate\",\n    placeholder: \"Enter Matric Number\",\n    id: \"matric\",\n    type: \"number\",\n    name: \"matric\",\n    value: matric,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 22\n    }\n  }, matricError), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"matric\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 23\n    }\n  }, \"Matric Number\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"material-icons prefix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 23\n    }\n  }, \"lock\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"validate\",\n    placeholder: \"Enter Password\",\n    id: \"password\",\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, passwordError), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 23\n    }\n  }, \"Password\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 23\n    }\n  }, \"\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    style: {\n      width: 100\n    },\n    className: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 77\n    }\n  }, \"Login\")))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(\"h7\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, \"Dont have an account? \", /*#__PURE__*/React.createElement(Link, {\n    to: \"/user/play/register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 47\n    }\n  }, \"Create Account\"))))))));\n};\n\nexport default Login;\n/* const initialState = {\r\n  matric: \"\",\r\n  password: \"\",\r\n  matricError: \"\",\r\n  passwordError: \"\"\r\n}\r\n\r\nclass Login extends Component{\r\n  state = initialState;\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name] : event.target.value\r\n    });\r\n  };\r\n\r\n  validate = () =>{\r\n    let matricError = \"\";\r\n    let passwordError = \"\"\r\n  \r\n    if(!this.state.matric){\r\n      matricError = \"Matric cannot be blank\";\r\n    }\r\n  \r\n    if(!this.state.password){\r\n      passwordError = \"Password cannot be blank\";\r\n    } \r\n  \r\n    if(matricError || passwordError){\r\n      this.setState({matricError, passwordError});\r\n      return false; \r\n    }\r\n     return true;\r\n  }\r\n\r\n  handleSubmit = (event) =>{\r\n    event.preventDefault();\r\n    const isValid = this.validate(); \r\n    if (isValid){\r\n      \r\n       const getOptions = {\r\n        method: \"GET\",\r\n        url:'/user/play/authenticated',\r\n        responseType:\"stream\"\r\n      }\r\n\r\n       const renderQuizPage = () =>{\r\n         axios(getOptions).then(()=>{\r\n           console.log('Quiz Page Is sucessfully rendered');\r\n          return this.props.history.push('/user/play/quiz');\r\n         }).catch(()=>{\r\n           console.log('Unable render Quiz Page');\r\n         })\r\n       }\r\n    \r\n         const payload = {\r\n          matric: this.state.matric,\r\n          password: this.state.password\r\n        };\r\n\r\n          axios({\r\n            url: \"/user/play/login\",\r\n            method: \"POST\",\r\n            data: payload,\r\n            withCredentials: true,\r\n            xsrfHeaderName:'X-XSRF-TOKEN',\r\n            xsrfCookieName:'XSRF-TOKEN'\r\n          })\r\n          .then(()=>{\r\n           return renderQuizPage();\r\n           }).catch((error)=>{\r\n            return this.props.history.push('/user/play/login');\r\n           })\r\n    };\r\n    this.setState(initialState);\r\n      };\r\n  \r\n    render(){\r\n       return(\r\n         <Fragment>\r\n         <Helmet><title>Nimelssa Quiz - Login page</title></Helmet>\r\n         <form onSubmit={this.handleSubmit}>\r\n         <div className=\"row\">\r\n         <div className=\"col s12 m4 offset-m4\"> \r\n            <div className=\"card z-depth-4\">\r\n               <div className=\"card-content black white-text\">\r\n                  <span className=\"card-title\">Login</span>\r\n               </div>\r\n               <div className=\"card-content\">\r\n   \r\n                  <div className=\"input-field\">\r\n                    <i className=\"material-icons prefix\">account_circle</i>\r\n                    <input \r\n                    className=\"validate\"\r\n                     placeholder=\"Enter Matric Number\"\r\n                    id=\"matric\" \r\n                    type=\"number\"\r\n                    name=\"matric\" \r\n                    value={this.state.matric}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                   <div style={{ color : \"red\" }}>\r\n                      {this.state.matricError}\r\n                  </div>\r\n                    <label htmlFor=\"matric\">Matric Number</label>\r\n                  </div>\r\n                 \r\n                  <div className=\"input-field\">\r\n                    <i className=\"material-icons prefix\">lock</i>\r\n                    <input \r\n                    className=\"validate\"\r\n                     placeholder=\"Enter Password\"\r\n                    id=\"password\" \r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                  <div style={{ color : \"red\" }}>\r\n                    {this.state.passwordError}\r\n                  </div>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                  </div>\r\n   \r\n                   <div >\r\n                    <label>\r\n                     &nbsp;<button style={{width:100}} className=\"button\"><span>Login</span></button>\r\n                    </label>\r\n                  </div><br />\r\n                  <h7>Dont have an account? <Link to=\"/user/play/register\">Create Account</Link></h7>\r\n               </div>\r\n            </div>\r\n         </div>\r\n       </div>\r\n         </form>\r\n     </Fragment>\r\n       )\r\n    }\r\n}\r\n  export default Login;\r\n */","map":{"version":3,"sources":["E:/quiz-only/client/src/components/Login.js"],"names":["Helmet","axios","Link","React","useState","Fragment","Login","userCredentialsInitialState","setUserCredentialsInitialState","matric","password","errorMessageInitialState","setErrorMessageInitialState","matricError","passwordError","initialstateSummation","setInitialStateSummation","state","initialState","handleChange","event","target","name","value","validate","handleSubmit","preventDefault","isValid","getOptions","method","url","responseType","renderQuizPage","then","console","log","props","history","push","catch","payload","data","withCredentials","xsrfHeaderName","xsrfCookieName","error","color","width"],"mappings":"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","sourcesContent":["import { Helmet } from 'react-helmet';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n/* import React, {Component, Fragment} from 'react'; */\r\n\r\nimport React, { useState, Fragment} from 'react';\r\n\r\nconst Login = () => {\r\n\r\n  const [userCredentialsInitialState, setUserCredentialsInitialState] = useState({\r\n    matric: '',\r\n    password: ''\r\n  })\r\n  \r\n  const [errorMessageInitialState, setErrorMessageInitialState] = useState({\r\n    matricError: '',\r\n    passwordError: ''\r\n  })\r\n  \r\n  const [ initialstateSummation, setInitialStateSummation] = useState({\r\n    matric: '',\r\n    password: '',\r\n    matricError: '',\r\n    passwordError: ''\r\n  }),\r\n  \r\n    state = initialState; // To figure ou\r\n  /* \r\n   const handleChange = event => {\r\n      this.setState({\r\n        [event.target.name] : event.target.value\r\n      });\r\n    }; */\r\n  \r\n    const handleChange = event => {\r\n      setUserCredentialsInitialState({\r\n        [event.target.name] : event.target.value\r\n      });\r\n    };\r\n  \r\n    const validate = () => {\r\n      let matricError = \"\";\r\n      let passwordError = \"\"\r\n    \r\n      if(!matric){\r\n        matricError = \"Matric cannot be blank\";\r\n      }\r\n    \r\n      if(!password){\r\n        passwordError = \"Password cannot be blank\";\r\n      } \r\n    \r\n     /*  if(matricError || passwordError){\r\n        this.setState({matricError, passwordError});\r\n        return false; \r\n      } */\r\n  \r\n      if(matricError || passwordError){\r\n        setErrorMessageInitialState({matricError, passwordError});\r\n        return false; \r\n      }\r\n  \r\n       return true;\r\n    }\r\n  \r\n  \r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      const isValid = this.validate(); \r\n      if (isValid){\r\n        \r\n         const getOptions = {\r\n          method: \"GET\",\r\n          url:'/user/play/authenticated',\r\n          responseType:\"stream\"\r\n        }\r\n  \r\n         const renderQuizPage = () =>{\r\n           axios(getOptions).then(()=>{\r\n             console.log('Quiz Page Is sucessfully rendered');\r\n            return this.props.history.push('/user/play/quiz');\r\n           }).catch(()=>{\r\n             console.log('Unable render Quiz Page');\r\n           })\r\n         }\r\n      \r\n           const payload = {\r\n            matric: matric,\r\n            password: password\r\n          };\r\n  \r\n            axios({\r\n              url: \"/user/play/login\",\r\n              method: \"POST\",\r\n              data: payload,\r\n              withCredentials: true,\r\n              xsrfHeaderName:'X-XSRF-TOKEN',\r\n              xsrfCookieName:'XSRF-TOKEN'\r\n            })\r\n            .then(()=>{\r\n             return renderQuizPage();\r\n             }).catch((error)=>{\r\n              return this.props.history.push('/user/play/login');\r\n             })\r\n      };\r\n      /* this.setState(initialState); */\r\n      setInitialStateSummation(initialstateSummation)\r\n        };\r\n    \r\n         return(\r\n           <Fragment>\r\n           <Helmet><title>Nimelssa Quiz - Login page</title></Helmet>\r\n           <form onSubmit={handleSubmit}>\r\n           <div className=\"row\">\r\n           <div className=\"col s12 m4 offset-m4\"> \r\n              <div className=\"card z-depth-4\">\r\n                 <div className=\"card-content black white-text\">\r\n                    <span className=\"card-title\">Login</span>\r\n                 </div>\r\n                 <div className=\"card-content\">\r\n     \r\n                    <div className=\"input-field\">\r\n                      <i className=\"material-icons prefix\">account_circle</i>\r\n                      <input \r\n                      className=\"validate\"\r\n                       placeholder=\"Enter Matric Number\"\r\n                      id=\"matric\" \r\n                      type=\"number\"\r\n                      name=\"matric\" \r\n                      value={matric}\r\n                      onChange={handleChange}\r\n                      />\r\n                     <div style={{ color : \"red\" }}>\r\n                        {matricError}\r\n                    </div>\r\n                      <label htmlFor=\"matric\">Matric Number</label>\r\n                    </div>\r\n                   \r\n                    <div className=\"input-field\">\r\n                      <i className=\"material-icons prefix\">lock</i>\r\n                      <input \r\n                      className=\"validate\"\r\n                       placeholder=\"Enter Password\"\r\n                      id=\"password\" \r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      value={password}\r\n                      onChange={handleChange}\r\n                      />\r\n                    <div style={{ color : \"red\" }}>\r\n                      {passwordError}\r\n                    </div>\r\n                      <label htmlFor=\"password\">Password</label>\r\n                    </div>\r\n     \r\n                     <div >\r\n                      <label>\r\n                       &nbsp;<button style={{width:100}} className=\"button\"><span>Login</span></button>\r\n                      </label>\r\n                    </div><br />\r\n                    <h7>Dont have an account? <Link to=\"/user/play/register\">Create Account</Link></h7>\r\n                 </div>\r\n              </div>\r\n           </div>\r\n         </div>\r\n           </form>\r\n       </Fragment>\r\n         )\r\n  } \r\n    export default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* const initialState = {\r\n  matric: \"\",\r\n  password: \"\",\r\n  matricError: \"\",\r\n  passwordError: \"\"\r\n}\r\n\r\nclass Login extends Component{\r\n  state = initialState;\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name] : event.target.value\r\n    });\r\n  };\r\n\r\n  validate = () =>{\r\n    let matricError = \"\";\r\n    let passwordError = \"\"\r\n  \r\n    if(!this.state.matric){\r\n      matricError = \"Matric cannot be blank\";\r\n    }\r\n  \r\n    if(!this.state.password){\r\n      passwordError = \"Password cannot be blank\";\r\n    } \r\n  \r\n    if(matricError || passwordError){\r\n      this.setState({matricError, passwordError});\r\n      return false; \r\n    }\r\n     return true;\r\n  }\r\n\r\n  handleSubmit = (event) =>{\r\n    event.preventDefault();\r\n    const isValid = this.validate(); \r\n    if (isValid){\r\n      \r\n       const getOptions = {\r\n        method: \"GET\",\r\n        url:'/user/play/authenticated',\r\n        responseType:\"stream\"\r\n      }\r\n\r\n       const renderQuizPage = () =>{\r\n         axios(getOptions).then(()=>{\r\n           console.log('Quiz Page Is sucessfully rendered');\r\n          return this.props.history.push('/user/play/quiz');\r\n         }).catch(()=>{\r\n           console.log('Unable render Quiz Page');\r\n         })\r\n       }\r\n    \r\n         const payload = {\r\n          matric: this.state.matric,\r\n          password: this.state.password\r\n        };\r\n\r\n          axios({\r\n            url: \"/user/play/login\",\r\n            method: \"POST\",\r\n            data: payload,\r\n            withCredentials: true,\r\n            xsrfHeaderName:'X-XSRF-TOKEN',\r\n            xsrfCookieName:'XSRF-TOKEN'\r\n          })\r\n          .then(()=>{\r\n           return renderQuizPage();\r\n           }).catch((error)=>{\r\n            return this.props.history.push('/user/play/login');\r\n           })\r\n    };\r\n    this.setState(initialState);\r\n      };\r\n  \r\n    render(){\r\n       return(\r\n         <Fragment>\r\n         <Helmet><title>Nimelssa Quiz - Login page</title></Helmet>\r\n         <form onSubmit={this.handleSubmit}>\r\n         <div className=\"row\">\r\n         <div className=\"col s12 m4 offset-m4\"> \r\n            <div className=\"card z-depth-4\">\r\n               <div className=\"card-content black white-text\">\r\n                  <span className=\"card-title\">Login</span>\r\n               </div>\r\n               <div className=\"card-content\">\r\n   \r\n                  <div className=\"input-field\">\r\n                    <i className=\"material-icons prefix\">account_circle</i>\r\n                    <input \r\n                    className=\"validate\"\r\n                     placeholder=\"Enter Matric Number\"\r\n                    id=\"matric\" \r\n                    type=\"number\"\r\n                    name=\"matric\" \r\n                    value={this.state.matric}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                   <div style={{ color : \"red\" }}>\r\n                      {this.state.matricError}\r\n                  </div>\r\n                    <label htmlFor=\"matric\">Matric Number</label>\r\n                  </div>\r\n                 \r\n                  <div className=\"input-field\">\r\n                    <i className=\"material-icons prefix\">lock</i>\r\n                    <input \r\n                    className=\"validate\"\r\n                     placeholder=\"Enter Password\"\r\n                    id=\"password\" \r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                  <div style={{ color : \"red\" }}>\r\n                    {this.state.passwordError}\r\n                  </div>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                  </div>\r\n   \r\n                   <div >\r\n                    <label>\r\n                     &nbsp;<button style={{width:100}} className=\"button\"><span>Login</span></button>\r\n                    </label>\r\n                  </div><br />\r\n                  <h7>Dont have an account? <Link to=\"/user/play/register\">Create Account</Link></h7>\r\n               </div>\r\n            </div>\r\n         </div>\r\n       </div>\r\n         </form>\r\n     </Fragment>\r\n       )\r\n    }\r\n}\r\n  export default Login;\r\n */"]},"metadata":{},"sourceType":"module"}